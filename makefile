### Settings

# set to non-zero for the parallel version
MPI = 1

# set to non-zero for the debug version
DEBUG = 1

# set to non-zero for the profiled version
PROFILE = 0


# set libraries
LIBS += -lm -lstdc++
LDFLAGS = $(CXXFLAGS)
LDLIBS = $(LIBS)

# set flags
CXXFLAGS = -O3
ifneq (${DEBUG},0)
	CXXFLAGS += -ggdb -DOM_DEBUG
else
	CXXFLAGS += -Wno-deprecated -O3
endif

# set compiler
ifneq ($(MPI),0)
	CXXFLAGS += -DMPI_ENABLED
	CXX = mpic++
else
	CXX = gcc
endif

# set profiler
ifneq (${PROFILE},0)
	CXXFLAGS += -g -pg
endif

# actually make things
OBJECTS = likelihood.o main.o om_app.o io.o mcmc.o om_math.o obsmatrix.o
PROGS = omegamip 

all: $(PROGS) 

clean:
	rm -f *.o

showdep: 
	@$(CXX) -MM main.cpp likelihood.cpp mcmc.cpp io.cpp om_app.cpp obsmatrix.cpp om_math.cpp

omegamip: $(OBJECTS)
	$(CXX) $(LDFLAGS) $(LDLIBS) -o omegamip $(OBJECTS)

# generated by showdep
main.o: main.cpp random.h myerror.h om_incl.h om_app.h myutils.h utils.h \
  vector.h matrix.h lotri_matrix.h DNA.h obsmatrix.h
likelihood.o: likelihood.cpp om_incl.h om_app.h myutils.h myerror.h \
  utils.h vector.h matrix.h lotri_matrix.h random.h DNA.h obsmatrix.h \
  om_math.h
mcmc.o: mcmc.cpp om_app.h myutils.h myerror.h utils.h vector.h matrix.h \
  lotri_matrix.h random.h DNA.h obsmatrix.h om_incl.h
io.o: io.cpp om_app.h myutils.h myerror.h utils.h vector.h matrix.h \
  lotri_matrix.h random.h DNA.h obsmatrix.h controlwizard.h
om_app.o: om_app.cpp om_incl.h om_app.h myutils.h myerror.h utils.h \
  vector.h matrix.h lotri_matrix.h random.h DNA.h obsmatrix.h \
  controlwizard.h argumentwizard.h
obsmatrix.o: obsmatrix.cpp om_incl.h obsmatrix.h vector.h myerror.h \
  matrix.h lotri_matrix.h
om_math.o: om_math.cpp om_math.h




